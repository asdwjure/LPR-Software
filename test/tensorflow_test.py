# -*- coding: utf-8 -*-
"""TensorFlow_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aePVb8q0Wyv3PB9gXjGVGccydLVSFoM3
"""

import tensorflow as tf
import matplotlib.pyplot as plt

# (train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.cifar10.load_data()
(train_images, train_labels), (_, _) = tf.keras.datasets.cifar10.load_data()

train_images = train_images / 255.0
test_images = test_images / 255.0

print(train_images.shape)
print(test_images.shape)
print(train_labels)

plt.imshow(train_images[0], cmap='gray')
plt.show()

# define the neural network
my_model = tf.keras.models.Sequential()
# my_model.add(tf.keras.layers.Flatten(input_shape=(32,32,3)))
my_model.add(tf.keras.layers.Conv2D(24,(5,5), strides=(2, 2), input_shape=(32,32,3), activation='relu'))
# my_model.add(tf.keras.layers.Conv2D(32, 3, padding='same', input_shape=(32,32,3), activation='relu'))
my_model.add(tf.keras.layers.Conv2D(32, 3, activation='relu'))
my_model.add(tf.keras.layers.MaxPooling2D())
my_model.add(tf.keras.layers.Dropout(0.25))
my_model.add(tf.keras.layers.Flatten())
my_model.add(tf.keras.layers.Dense(128, activation='relu'))
my_model.add(tf.keras.layers.Dense(64, activation='relu'))
my_model.add(tf.keras.layers.Dropout(0.5))
my_model.add(tf.keras.layers.Dense(10, activation='softmax'))

# Compile the model
my_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
my_model.fit(train_images, train_labels, epochs=10)

# A bigger and better model

# input_shape = (32, 32, 3)

# train_images=train_images.reshape(train_images.shape[0], train_images.shape[1], train_images.shape[2], 3)
# test_images = test_images.reshape(test_images.shape[0], test_images.shape[1], test_images.shape[2], 3)

# my_model = tf.keras.models.Sequential([
#     tf.keras.layers.Conv2D(32, 3, padding='same', input_shape=train_images.shape[1:], activation='relu'),
#     tf.keras.layers.Conv2D(32, 3, activation='relu'),
#     tf.keras.layers.MaxPooling2D(),
#     tf.keras.layers.Dropout(0.25),

#     tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu'),
#     tf.keras.layers.Conv2D(64, 3, activation='relu'),
#     tf.keras.layers.MaxPooling2D(),
#     tf.keras.layers.Dropout(0.25),

#     tf.keras.layers.Flatten(),
#     tf.keras.layers.Dense(512, activation='relu'),
#     tf.keras.layers.Dropout(0.5),
#     tf.keras.layers.Dense(10, activation='softmax'),
# ])

# my_model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.0001),
#             loss='categorical_crossentropy', metrics=['acc'])

# my_model.fit(train_images, train_labels, batch_size=32, epochs=50)

# Check the model accuracy on the test data
val_loss, val_acc = my_model.evaluate(test_images, test_labels)
print('Test accuracy', val_acc)

# Save the model
my_model.save('my_minst_model')

# load the saved model
my_new_model = tf.keras.models.load_model('my_minst_model')

